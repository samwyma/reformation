#!/usr/bin/env bash

###############################################################################
# VARIABLES
###############################################################################

cwd="$(cd "$(dirname "$0")" && pwd)" # Get full directory name of this script
export FORCE=false

for var in "$@"
do
  case "$var" in
    --force|-f)
      FORCE=true
      ;;
    --help|-h)
      echo "Usage:
      -f, --force    : Force a re-install of all specs and mods"
      exit 0
      ;;
  esac
  shift
done

###############################################################################
# ERROR: Let the user know if the script fails
###############################################################################

exec > >(tee -i "$cwd/reform.log")
exec 2>&1
trap 'ret=$?; test $ret -ne 0 && printf "\n   \e[31m\033[0m  Rebel Alert! Reform Failed  \e[31m\033[0m\n" >&2; exit $ret' EXIT
set -e

###############################################################################
# FUNCTIONS
###############################################################################

check_bash_version() {
   if ((BASH_VERSINFO[0] < 3))
   then
      print_error "Sorry, you need at least bash-3.0 to run this script."
      exit 1
   fi
}

check_internet_connection() {
   if ! ping -c1 google.com &> /dev/null; then
      print_error "Please check your internet connection";
      exit 1
   else
      print_success "Internet connection";
   fi
}

check_ssh_key() {
   key=$HOME/.ssh/id_rsa.pub

   if ! [[ -f $key ]]; then
      if ask "No SSH key found. Create one?" Y; then
         ssh-keygen -b 4096 -t rsa

         if ask "SSH key created. Add it to Github?" Y; then
            inform 'Public key copied! Paste into Github…'
            [[ -f $key ]] && cat $key | pbcopy
            open 'https://github.com/account/ssh'
            read -r -p "   ✦  Press enter to continue…"
         fi

         print_success "SSH key";
      fi
   else
      print_success "SSH key";
   fi
}

check_path_entry() {
   if ! [ -x "$(command -v reform)" ]; then
      print_error "reform \$PATH entry missing"
      print_error "Add to your shell's rc file: PATH=\"$cwd/:\$PATH\""
   else
      print_success "reform \$PATH entry"
   fi
}

install_homebrew() {
   if ! [ -x "$(command -v brew)" ]; then
      step "Installing Homebrew…"
      curl -fsS 'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby
      export PATH="/usr/local/bin:$PATH"
      print_success "Homebrew installed!"
   else
      print_success_muted "Homebrew already installed. Skipping."
   fi
}

install_xcode() {
   if [ -x "$(command -v xcode-select)" ]; then
      print_success_muted "Xcode already installed. Skipping."
   else
      step "Installing Xcode…"
      xcode-select --install
      print_success "Xcode installed!"
   fi

   if [ ! -d "$HOME/.bin/" ]; then
      mkdir "$HOME/.bin"
   fi
}

install_specs() {
   if [ ! -d "$cwd/specs" ] && [ -z "$(ls -A $cwd/specs)" ]; then
      print_warning "No specs found. Skipping."
      return
   fi

   for spec in $cwd/specs/*; do
      "$spec" 
   done
}

install_mods() {
   if [ ! -d "$cwd/mods" ] || [ -z "$(ls -A $cwd/mods)" ]; then
      print_warning "No mods found. Skipping."
      return
   fi

   for mod in $cwd/mods/*; do
      "$mod" 
   done
}

###############################################################################
# Reform!                    http://patorjk.com/software/taag/ ( font: Script )
###############################################################################

check_bash_version
source $cwd/pretty-print

printf "
            ___                   _   _         
    ___ ___|  _|___ ___ _____ ___| |_|_|___ ___ 
   |  _| -_|  _| . |  _|     | .'|  _| | . |   |
   |_| |___|_| |___|_| |_|_|_|__,|_| |_|___|_|_|
----------------------------------------------------

╭───────────────────────────────────────────────────╮
│  You are about to be ${bold}reformed${normal}.                    │
│───────────────────────────────────────────────────│
│  Safe to run multiple times on the same machine.  │
│  It ${green}installs${reset}, ${blue}upgrades${reset}, or ${yellow}skips${reset} packages based   │
│  on what is already installed on the machine.     │
╰───────────────────────────────────────────────────╯
${dim}$BASH ${normal}${dim}v$BASH_VERSION${reset}
"

chapter "Prerequisites…"
check_internet_connection
check_path_entry
check_ssh_key

chapter "Dependencies…"
install_xcode
install_homebrew

chapter "Installing Specs…"
install_specs

chapter "Adding Mods…"
install_mods

printf "\n${bold}You have been reformed! Have a nice day.${normal}\n\n"
