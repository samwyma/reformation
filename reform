#!/usr/bin/env bash

###############################################################################
# VARIABLES
###############################################################################

cwd="$(cd "$(dirname "$0")" && pwd)" # Get full directory name of this script
specs=true
mods=true
export FORCE=false

for var in "$@"; do
   case "$var" in
   --specs | -s)
      specs=true
      mods=false
      ;;
   --mods | -m)
      specs=false
      mods=true
      ;;
   --force | -f)
      FORCE=true
      ;;
   --help | -h)
      echo "Usage:
      -s, --specs    : Only run the specs (no dependencies)
      -m, --mods     : Only run the mods (which have dependencies)
      -f, --force    : Force a re-install of all specs and mods
      "
      exit 0
      ;;
   esac
   shift
done

###############################################################################
# ERROR: Let the user know if the script fails
###############################################################################

exec > >(tee -i "$cwd/reform.log")
exec 2>&1
trap 'ret=$?; test $ret -ne 0 && printf "\n   \e[31m\033[0m  Rebel Alert! Reform Failed  \e[31m\033[0m\n" >&2; exit $ret' EXIT
set -e

###############################################################################
# FUNCTIONS
###############################################################################

check_internet_connection() {
   if ! ping -c1 google.com &>/dev/null; then
      print_error "Please check your internet connection"
      exit 1
   else
      print_success "Internet connection"
   fi
}

check_ssh_key() {
   key=$HOME/.ssh/id_rsa.pub

   if ! [[ -f $key ]]; then
      if ask "No SSH key found. Create one?" Y; then
         ssh-keygen -b 4096 -t rsa

         if ask "SSH key created. Add it to Github?" Y; then
            inform 'Public key copied! Paste into Github…'
            [[ -f $key ]] && cat "$key" | pbcopy
            open 'https://github.com/account/ssh'
            read -r -p "   ✦  Press enter to continue…"
         fi

         print_success "SSH key"
      fi
   else
      print_success "SSH key"
   fi
}

update_reformation() {
   echo_install "Updating reformation…"
   wd=$(pwd)
   cd "$REFORMATION_DIR"

   git fetch origin >/dev/null
   if [[ $(git rev-parse HEAD) != $(git rev-parse @{u}) ]]; then
      printf "\n\n"
      git stash >/dev/null
      git pull --rebase --stat origin master >/dev/null
      git stash pop >/dev/null || true
      print_warning "###############################"
      print_warning "Updated! Please re-run 'reform'"
      print_warning "###############################"
      exit 0
   else
      print_in_green "${bold}✓ on latest\n"
   fi

   cd "$wd"
}

install_reformrc() {
   template_file=".reformrc.template"
   config_file=".reformrc.config"

   if [ "$REFORMRC" != "1" ]; then
      REFORMATION_DIR=$(pwd)

      if [ -x "$(command -v reform)" ]; then
         REFORMATION_DIR=$(dirname "$(command -v reform)")
      fi

      if [ ! -f "$REFORMATION_DIR/$template_file" ]; then
         print_error "Please run initial reform from within reformation repository."
         exit 1
      fi

      print_error "Please add 'source \$HOME/.reformrc' to your shell profile."
   fi

   if [ -f "$HOME/$config_file" ]; then
      source "$HOME/$config_file" >/dev/null
   fi

   if [ "$RESYNC_CONFIG" == "true" ] || [ ! -f "$HOME/$config_file" ]; then
      cp "$REFORMATION_DIR/$config_file" "$HOME/$config_file"
      print_success ".reformrc.config copied to \$HOME directory."
   else
      print_success_muted "Not resyncing .reformrc.config"
   fi

   ref_template="$REFORMATION_DIR/$template_file"

   # dependency for .reformrc
   mkdir -p ~/.landtech
   cat $ref_template | sed "s|~ref_path~|${REFORMATION_DIR}|g" >"$HOME/.reformrc"
   source "$HOME/.reformrc" >/dev/null
   print_success ".reformrc copied to \$HOME directory."
}

install_homebrew() {
   if ! [ -x "$(command -v brew)" ]; then
      step "Installing Homebrew…"
      bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      export PATH="/usr/local/bin:$PATH"
      print_success "Homebrew installed!"
   else
      print_success_muted "Homebrew already installed. Skipping."
   fi
}

install_xcode() {
   if [ -x "$(command -v xcode-select)" ]; then
      print_success_muted "Xcode already installed. Skipping."
   else
      step "Installing Xcode…"
      xcode-select --install
      print_success "Xcode installed!"
   fi

   if [ ! -d "$HOME/.bin/" ]; then
      mkdir "$HOME/.bin"
   fi
}

install_specs() {
   if [ ! -d "$cwd/specs" ] && [ -z "$(ls -A "$cwd"/specs)" ]; then
      print_warning "No specs found. Skipping."
      return
   fi

   for spec in "$cwd"/specs/*; do
      "$spec"
   done
}

install_mods() {
   if [ ! -d "$cwd/mods" ] || [ -z "$(ls -A "$cwd"/mods)" ]; then
      print_warning "No mods found. Skipping."
      return
   fi

   for mod in "$cwd"/mods/*; do
      "$mod"
   done
}

###############################################################################
# Reform!                    http://patorjk.com/software/taag/ ( font: Script )
###############################################################################

source "$cwd/pretty-print"

printf "
            ___                   _   _         
    ___ ___|  _|___ ___ _____ ___| |_|_|___ ___ 
   |  _| -_|  _| . |  _|     | .'|  _| | . |   |
   |_| |___|_| |___|_| |_|_|_|__,|_| |_|___|_|_|
----------------------------------------------------

╭───────────────────────────────────────────────────╮
│  You are about to be ${bold}reformed${normal}.                    │
│───────────────────────────────────────────────────│
│  Safe to run multiple times on the same machine.  │
│  It ${green}installs${reset}, ${blue}upgrades${reset}, or ${yellow}skips${reset} packages based   │
│  on what is already installed on the machine.     │
╰───────────────────────────────────────────────────╯
"

chapter "Prerequisites…"
install_reformrc
check_internet_connection
check_ssh_key
update_reformation

chapter "Dependencies…"
install_xcode
install_homebrew

if $specs; then
   chapter "Installing Specs…"
   install_specs
fi

if $mods; then
   chapter "Adding Mods…"
   install_mods
fi

printf "\n${bold}You have been reformed! Have a nice day.${normal}\n\n"
