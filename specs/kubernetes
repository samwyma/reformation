#!/usr/bin/env bash
source "$(cd "$(dirname "$0")" && pwd)/../pretty-print"

title "Kubernetes"

versions=$(curl --fail --retry 3 --retry-delay 1 -L -s https://raw.githubusercontent.com/samwyma/docker-ci-images/master/version.json)
kubectl_version=$(jq -r .kubectl <<<"$versions")
helm_version=$(jq -r .helm <<<"$versions")
kops_version=$(jq -r .kops <<<"$versions")
argo_version=$(jq -r .argo <<<"$versions")
argocd_version=$(jq -r .argocd <<<"$versions")
terraform_version=$(jq -r .terraform <<<"$versions")
packer_version=$(jq -r .packer <<<"$versions")
gcloud_version="406.0.0"

if ! [ -x "$(command -v docker)" ]; then
  print_error "Docker is required, it should be included in the 'specs'"
  return 1
fi

mkdir -p "$HOME/.bin"
if [[ ! ":$PATH:" == *":$HOME/.bin:"* ]]; then
  print_error "\$PATH entry missing...add to your shell's rc file: PATH=\"\$HOME/.bin:\$PATH\""
fi

### kubectl
if [ "$FORCE" = true ] || [ ! -f "$HOME/.bin/kubectl" ] || [ "$(kubectl version --client --output=json | jq -r .clientVersion.gitVersion)" != $kubectl_version ]; then
  echo_install "Installing kubectl $kubectl_version"
  if curl --fail --retry 3 --retry-delay 1 -L -s https://storage.googleapis.com/kubernetes-release/release/$kubectl_version/bin/darwin/amd64/kubectl >"$HOME/.bin/kubectl" && chmod +x "$HOME/.bin/kubectl"; then
    print_in_green "${bold}✓ installed!${normal}\n"
  else
    print_in_red "${bold}✗ error!!!${normal}\n"
  fi
else
  print_success_muted "kubectl"
fi

### helm
if [ "$FORCE" = true ] || [ ! -f "$HOME/.bin/helm" ] || ! helm version --client --short | grep -q "$helm_version+"; then
  echo_install "Installing helm $helm_version"
  if curl --fail --retry 3 --retry-delay 1 -L -s https://get.helm.sh/helm-$helm_version-darwin-amd64.tar.gz | tar xf - --strip=1 -C "$HOME/.bin" darwin-amd64/helm; then
    print_in_green "${bold}✓ installed!${normal}\n"
  else
    print_in_red "${bold}✗ error!!!${normal}\n"
  fi
else
  print_success_muted "helm"
fi

### kops
if [ "$FORCE" = true ] || [ ! -f "$HOME/.bin/kops" ] || [[ "v$(kops version --short)" != "$kops_version" ]]; then
  echo_install "Installing kops $kops_version"
  if curl --fail --retry 3 --retry-delay 1 -L -s https://github.com/kubernetes/kops/releases/download/${kops_version}/kops-darwin-amd64 -o "$HOME/.bin/kops" && chmod +x "$HOME/.bin/kops"; then
    print_in_green "${bold}✓ installed!${normal}\n"
  else
    print_in_red "${bold}✗ error!!!${normal}\n"
  fi
else
  print_success_muted "kops"
fi

### argo
if [ "$FORCE" = true ] || [ ! -f "$HOME/.bin/argo" ] || ! argo version | grep -q "$argo_version"; then
  echo_install "Installing argo $argo_version"
  if curl --fail --retry 3 --retry-delay 1 -L -s https://github.com/argoproj/argo/releases/download/${argo_version}/argo-darwin-amd64.gz | gunzip > "$HOME/.bin/argo" && chmod +x "$HOME/.bin/argo"; then
    print_in_green "${bold}✓ installed!${normal}\n"
  else
    print_in_red "${bold}✗ error!!!${normal}\n"
  fi
else
  print_success_muted "argo"
fi

### argocd
if [ "$FORCE" = true ] || [ ! -f "$HOME/.bin/argocd" ] || ! argocd version --client | grep -q "$argocd_version"; then
  echo_install "Installing argocd $argocd_version"
  if curl --fail --retry 3 --retry-delay 1 -L -s https://github.com/argoproj/argo-cd/releases/download/${argocd_version}/argocd-darwin-amd64 -o "$HOME/.bin/argocd" && chmod +x "$HOME/.bin/argocd"; then
    print_in_green "${bold}✓ installed!${normal}\n"
  else
    print_in_red "${bold}✗ error!!!${normal}\n"
  fi
else
  print_success_muted "argocd"
fi

### terraform
if [ "$FORCE" = true ] || [ ! -f "$HOME/.bin/terraform" ] || ! terraform version | grep -q "$terraform_version"; then
  echo_install "Installing terraform $terraform_version"
  tmp_file="$(mktemp)"
  if curl --fail --retry 3 --retry-delay 1 -L -s "https://releases.hashicorp.com/terraform/${terraform_version}/terraform_${terraform_version}_darwin_amd64.zip" > "$tmp_file"; then
    if unzip -p "$tmp_file" > "$HOME/.bin/terraform" && chmod +x "$HOME/.bin/terraform"; then
      print_in_green "${bold}✓ installed!${normal}\n"
    else
      print_in_red "${bold}✗ error!!!${normal}\n"
    fi
    rm "$tmp_file"
  else
    print_in_red "${bold}✗ error!!!${normal}\n"
  fi
else
  print_success_muted "terraform"
fi

### packer
if [ "$FORCE" = true ] || [ ! -f "$HOME/.bin/packer" ] || ! packer version | grep -q "$packer_version"; then
  echo_install "Installing packer $packer_version"
  tmp_file="$(mktemp)"
  if curl --fail --retry 3 --retry-delay 1 -L -s "https://releases.hashicorp.com/packer/${packer_version}/packer_${packer_version}_darwin_amd64.zip" > "$tmp_file"; then
    if unzip -p "$tmp_file" > "$HOME/.bin/packer" && chmod +x "$HOME/.bin/packer"; then
      print_in_green "${bold}✓ installed!${normal}\n"
    else
      print_in_red "${bold}✗ error!!!${normal}\n"
    fi
    rm "$tmp_file"
  else
    print_in_red "${bold}✗ error!!!${normal}\n"
  fi
else
  print_success_muted "packer"
fi

### gcloud
if [ "$FORCE" = true ] || [ ! command -v gcloud ] || ! gcloud --version | grep -q "$gcloud_version"; then
  echo_install "Installing gcloud $gcloud_version"
  rm -rf "$HOME/.bin/google-cloud-sdk"
  if curl --fail --retry 3 --retry-delay 1 -L -s "https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-${gcloud_version}-darwin-x86_64.tar.gz" | tar xf - -C "$HOME/.bin"; then
    if (cd "$HOME/.bin" && ./google-cloud-sdk/install.sh -q --install-python false); then
      print_in_green "${bold}✓ installed!${normal}\n"
    fi
    print_in_red "${bold}✗ error!!!${normal}\n"
  else
    print_in_red "${bold}✗ error!!!${normal}\n"
  fi
else
  print_success_muted "gcloud"
fi


### promtool
if [ "$FORCE" = true ] || [ ! -f "$HOME/.bin/promtool" ]; then
  echo_install "Installing promtool"
  docker run --rm -e GOOS=darwin -e GOARCH=amd64 -v "$HOME/.bin":/data golang /bin/bash -c \
    "go install github.com/prometheus/prometheus/cmd/promtool@latest && cp /go/bin/darwin_amd64/promtool /data"
  print_in_green "${bold}✓ installed!${normal}\n"
else
  print_success_muted "promtool"
fi

if [ "$FORCE" = true ] || [ ! -f "$HOME/.bin/jb" ]; then
  echo_install "Installing jsonnet-bundler"
  docker run --rm -e GOOS=darwin -e GOARCH=amd64 -v "$HOME/.bin":/data golang /bin/bash -c \
    "go install github.com/jsonnet-bundler/jsonnet-bundler/cmd/jb@latest && cp /go/bin/darwin_amd64/jb /data"
  print_in_green "${bold}✓ installed!${normal}\n"
else
  print_success_muted "jsonnet-bundler"
fi

if [ "$FORCE" = true ] || [ ! -f "$HOME/.bin/gojsontoyaml" ]; then
  echo_install "Installing gojsontoyaml"
  docker run --rm -e GOOS=darwin -e GOARCH=amd64 -v "$HOME/.bin":/data golang /bin/bash -c \
    "go install github.com/brancz/gojsontoyaml@latest && cp /go/bin/darwin_amd64/gojsontoyaml /data"
  print_in_green "${bold}✓ installed!${normal}\n"
else
  print_success_muted "gojsontoyaml"
fi

if [ "$FORCE" = true ] || [ ! -f "$HOME/.bin/render" ]; then
  echo_install "Installing render"
  docker run --rm -e GOOS=darwin -e GOARCH=amd64 -v "$HOME/.bin":/data golang /bin/bash -c \
    "go install github.com/VirtusLab/render@latest && cp /go/bin/darwin_amd64/render /data"
  print_in_green "${bold}✓ installed!${normal}\n"
else
  print_success_muted "render"
fi
